j@i-ho 8.RDS % terraform init


j@i-ho 8.RDS % terraform plan
var.RDS_PASSWORD
  Enter a value: jagdevops


Terraform used the selected providers to generate the following execution plan. Resource actions are indicated
with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_db_instance.mariadb will be created
  + resource "aws_db_instance" "mariadb" {
      + address                               = (known after apply)
      + allocated_storage                     = 20
      + apply_immediately                     = false
      + arn                                   = (known after apply)
      + auto_minor_version_upgrade            = true
      + availability_zone                     = "eu-west-2a"
      + backup_retention_period               = 30
      + backup_target                         = (known after apply)
      + backup_window                         = (known after apply)
      + ca_cert_identifier                    = (known after apply)
      + character_set_name                    = (known after apply)
      + copy_tags_to_snapshot                 = false
      + database_insights_mode                = (known after apply)
      + db_name                               = "mydb"
      + db_subnet_group_name                  = "mariadb-subnet"
      + dedicated_log_volume                  = false
      + delete_automated_backups              = true
      + domain_fqdn                           = (known after apply)
      + endpoint                              = (known after apply)
      + engine                                = "mariadb"
      + engine_lifecycle_support              = (known after apply)
      + engine_version                        = "10.6.23"
      + engine_version_actual                 = (known after apply)
      + hosted_zone_id                        = (known after apply)
      + id                                    = (known after apply)
      + identifier                            = "mariadb-instance"
      + identifier_prefix                     = (known after apply)
      + instance_class                        = "db.t3.micro"
      + iops                                  = (known after apply)
      + kms_key_id                            = (known after apply)
      + latest_restorable_time                = (known after apply)
      + license_model                         = (known after apply)
      + listener_endpoint                     = (known after apply)
      + maintenance_window                    = (known after apply)
      + master_user_secret                    = (known after apply)
      + master_user_secret_kms_key_id         = (known after apply)
      + monitoring_interval                   = 0
      + monitoring_role_arn                   = (known after apply)
      + multi_az                              = false
      + nchar_character_set_name              = (known after apply)
      + network_type                          = (known after apply)
      + option_group_name                     = (known after apply)
      + parameter_group_name                  = "mariadb-paremeters"
      + password                              = (sensitive value)
      + password_wo                           = (write-only attribute)
      + performance_insights_enabled          = false
      + performance_insights_kms_key_id       = (known after apply)
      + performance_insights_retention_period = (known after apply)
      + port                                  = (known after apply)
      + publicly_accessible                   = false
      + region                                = "eu-west-2"
      + replica_mode                          = (known after apply)
      + replicas                              = (known after apply)
      + resource_id                           = (known after apply)
      + skip_final_snapshot                   = true
      + snapshot_identifier                   = (known after apply)
      + status                                = (known after apply)
      + storage_throughput                    = (known after apply)
      + storage_type                          = "gp2"
      + tags                                  = {
          + "Name" = "mariadb-instance"
        }
      + tags_all                              = {
          + "Name" = "mariadb-instance"
        }
      + timezone                              = (known after apply)
      + username                              = "root"
      + vpc_security_group_ids                = (known after apply)
    }

  # aws_db_parameter_group.mariadb-parameters will be created
  + resource "aws_db_parameter_group" "mariadb-parameters" {
      + arn          = (known after apply)
      + description  = "mariadb parameter group"
      + family       = "mariadb10.6"
      + id           = (known after apply)
      + name         = "mariadb-paremeters"
      + name_prefix  = (known after apply)
      + region       = "eu-west-2"
      + skip_destroy = false
      + tags_all     = (known after apply)

      + parameter {
          + apply_method = "immediate"
          + name         = "character_set_server"
          + value        = "utf8mb4"
        }
    }

  # aws_db_subnet_group.mariadb-subnet will be created
  + resource "aws_db_subnet_group" "mariadb-subnet" {
      + arn                     = (known after apply)
      + description             = "subnet group for mariadb"
      + id                      = (known after apply)
      + name                    = "mariadb-subnet"
      + name_prefix             = (known after apply)
      + region                  = "eu-west-2"
      + subnet_ids              = (known after apply)
      + supported_network_types = (known after apply)
      + tags_all                = (known after apply)
      + vpc_id                  = (known after apply)
    }

  # aws_instance.example will be created
  + resource "aws_instance" "example" {
      + ami                                  = "ami-0cb226682278979e9"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + enable_primary_ipv6                  = (known after apply)
      + force_destroy                        = false
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "j_iac_id_rsa"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_group_id                   = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + region                               = "eu-west-2"
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "example-instance"
        }
      + tags_all                             = {
          + "Name" = "example-instance"
        }
      + tenancy                              = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + primary_network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

  # aws_internet_gateway.main-gw will be created
  + resource "aws_internet_gateway" "main-gw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + region   = "eu-west-2"
      + tags     = {
          + "Name" = "main-gateway"
        }
      + tags_all = {
          + "Name" = "main-gateway"
        }
      + vpc_id   = (known after apply)
    }

  # aws_key_pair.j_iac_key will be created
  + resource "aws_key_pair" "j_iac_key" {
      + arn             = (known after apply)
      + fingerprint     = (known after apply)
      + id              = (known after apply)
      + key_name        = "j_iac_id_rsa"
      + key_name_prefix = (known after apply)
      + key_pair_id     = (known after apply)
      + key_type        = (known after apply)
      + public_key      = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDHYIodCq5Z+qOdlx/pO7aAEbnTJj3PAsf+/zGRV8TQCR8CnZEPwCd81s1FG3VnWCv1KwpErqwuDmw/4i+gh2+550a7YqegX9L/2gKOlVXAfEJmXwWvKLAdt+MTZrQZIsh1wiTjon4cc3Zuk8RLOT8O9iWYsDasAP1uRbvH/uKxN4gjzkGFRpdIvcU1ylpAttl6Vtdsi8Kd0Jsr8KvoCPuEkVDzdy/xQzk2V3LA30L0Q2jA9VC8WbzYDqWVkEqGmx/WecsFPxiYppA4HzLSgYIo8blE3XLGRbsUoFVM6h5sTCu0jRGXYwgQBAxAOqmgSir728dkD+pYgTDCdilcrttCPfIS6vGmjpkeNF5lXP8+Z6sY0wOSokzaXt6LWlGUqT1XPCfL33BsWgHTalvrhp7S12Hep3kzdK6eO+kySkj6I0QqL1BMPbVUNyJyNYYRKi7JB9k75xIo/cSdR5pm4X/4SDG6yjL6v89WoCSgelY30niXoVizfHbuBbO+D81c2rBjIubSJUYH5md8izsfXoRdWZ8AYIHcT/vUCb//OomxlYLs4VNUF2WkIMMnv1M4cSrSs6H42b0DJXsus+OREdKZ678e+d3oup3FIoSz7i7EhoZbQJLh2wId8N28z81Hk1zBhe09SRkc0037NAGRC0fA/G6DmP31Te9tE286c4mAeQ== j@i-ho.local"
      + region          = "eu-west-2"
      + tags_all        = (known after apply)
    }

  # aws_route_table.public_rt will be created
  + resource "aws_route_table" "public_rt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + region           = "eu-west-2"
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/24"
              + gateway_id                 = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "public-route-table"
        }
      + tags_all         = {
          + "Name" = "public-route-table"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.public_subnet-1 will be created
  + resource "aws_route_table_association" "public_subnet-1" {
      + id             = (known after apply)
      + region         = "eu-west-2"
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.public_subnet-2 will be created
  + resource "aws_route_table_association" "public_subnet-2" {
      + id             = (known after apply)
      + region         = "eu-west-2"
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.public_subnet-3 will be created
  + resource "aws_route_table_association" "public_subnet-3" {
      + id             = (known after apply)
      + region         = "eu-west-2"
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.allow-mariadb will be created
  + resource "aws_security_group" "allow-mariadb" {
      + arn                    = (known after apply)
      + description            = "Allow inbound traffic from EC2 to RDS"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = true
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + from_port        = 3306
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 3306
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "allow-mariadb"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + region                 = "eu-west-2"
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "allow-mariadb"
        }
      + tags_all               = {
          + "Name" = "allow-mariadb"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.example-instance will be created
  + resource "aws_security_group" "example-instance" {
      + arn                    = (known after apply)
      + description            = "Allow inbound traffic to MariaDB"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "allow-instance"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + region                 = "eu-west-2"
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "allow-instance"
        }
      + tags_all               = {
          + "Name" = "allow-instance"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.private_subnet-1 will be created
  + resource "aws_subnet" "private_subnet-1" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-west-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.4.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + region                                         = "eu-west-2"
      + tags                                           = {
          + "Name" = "private_subnet-1"
        }
      + tags_all                                       = {
          + "Name" = "private_subnet-1"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.private_subnet-2 will be created
  + resource "aws_subnet" "private_subnet-2" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-west-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.5.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + region                                         = "eu-west-2"
      + tags                                           = {
          + "Name" = "private_subnet-2"
        }
      + tags_all                                       = {
          + "Name" = "private_subnet-2"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.private_subnet-3 will be created
  + resource "aws_subnet" "private_subnet-3" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-west-2c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.6.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + region                                         = "eu-west-2"
      + tags                                           = {
          + "Name" = "private_subnet-3"
        }
      + tags_all                                       = {
          + "Name" = "private_subnet-3"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.public_subnet-1 will be created
  + resource "aws_subnet" "public_subnet-1" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-west-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + region                                         = "eu-west-2"
      + tags                                           = {
          + "Name" = "public_subnet-1"
        }
      + tags_all                                       = {
          + "Name" = "public_subnet-1"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.public_subnet-2 will be created
  + resource "aws_subnet" "public_subnet-2" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-west-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + region                                         = "eu-west-2"
      + tags                                           = {
          + "Name" = "public_subnet-2"
        }
      + tags_all                                       = {
          + "Name" = "public_subnet-2"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.public_subnet-3 will be created
  + resource "aws_subnet" "public_subnet-3" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-west-2c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.3.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + region                                         = "eu-west-2"
      + tags                                           = {
          + "Name" = "named_subnet-3"
        }
      + tags_all                                       = {
          + "Name" = "named_subnet-3"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + region                               = "eu-west-2"
      + tags                                 = {
          + "Name" = "main-vpc"
        }
      + tags_all                             = {
          + "Name" = "main-vpc"
        }
    }

Plan: 19 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + instance     = (known after apply)
  + rds_endpoint = (known after apply)

───────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these
actions if you run "terraform apply" now.
j@i-ho 8.RDS % 